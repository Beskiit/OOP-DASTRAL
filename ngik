import java.util.Scanner;

public class BillsPayment extends UserSide{
	static Overriding over = new Overriding();
	static PatientBill pb = new PatientBill();
	static DefaultBills db = new DefaultBills();
	static Scanner sc = new Scanner(System.in);
	static double totalPrice = 0.0;
    public void billsList() {
        boolean cont = true;

        while (cont) {
            System.out.println("[1] Checkup");
            System.out.println("[2] Laboratory");
            System.out.println("[3] Private Room");
            System.out.println("[4] ICU");
            System.out.println("[5] Medical Certificate");
            System.out.println("[6] Ambulance Charge");
            System.out.println("[7] Anesthesiologists Fee");
            System.out.println("[8] Surgeon");
            System.out.println("[9] Compute the total amount");
            System.out.println("[10] View Patient Balance");
            System.out.println("[11] Exit");

            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    pb.setTotalAmount(db.getCheckupPrice());
                    totalPrice += db.getCheckupPrice();
                    break;
                case 2:
                    pb.setTotalAmount(db.getLaboratoryPrice());
                    totalPrice += db.getLaboratoryPrice();
                    break;
                case 3:
                    pb.setTotalAmount(db.getPrivateRoomPricePerNight());
                    totalPrice += db.getPrivateRoomPricePerNight();
                    break;
                case 4:
                    pb.setTotalAmount(db.getIcuPrice());
                    totalPrice += db.getIcuPrice();
                    break;
                case 5:
                    pb.setTotalAmount(db.getMedicalCertificatePrice());
                    totalPrice += db.getMedicalCertificatePrice();
                    break;
                case 6:
                    pb.setTotalAmount(db.getAmbulanceChargesPrice());
                    totalPrice += db.getAmbulanceChargesPrice();
                    break;
                case 7:
                    pb.setTotalAmount(db.getAnesthesiologistsFeePerAnesthesia());
                    totalPrice += db.getAnesthesiologistsFeePerAnesthesia();
                    break;
                case 8:
                    pb.setTotalAmount(db.getSurgeonsFee());
                    totalPrice += db.getSurgeonsFee();
                    break;
                case 9:
                    System.out.println("The patient's total amount is " + totalPrice);
                    break;
                case 10:
                    viewBalances();
                    break;
                case 11:
                	cont = false;
                default:
                    System.err.println("Your input is wrong! Please try again.");
            }
        }
    }

    public void paymentBill() {
        UserSide.viewBalances();
        System.out.println("Enter the patient ID you want to pay for: ");
        String patientID = sc.next();

        if (UserSide.patientBalances.containsKey(patientID)) {
            double balance = UserSide.patientBalances.get(patientID);
            System.out.println("Patient's current balance: " + balance);

            System.out.println("How much do you want to pay?");
            double payAmount = sc.nextDouble();

            if (payAmount <= balance) {
            	UserSide.patientBalances.put(patientID, balance - payAmount);
                System.out.println("Payment successful!");
                System.out.println("Updated Balance: " + UserSide.patientBalances.get(patientID));
            } else {
                System.out.println("Invalid payment amount. Amount exceeds the balance.");
            }
        } else {
            System.out.println("Patient ID not found. Please enter a valid ID.");
        }
    }

    // Method to update patient balance after generating a bill
    public void updatePatientBalance(double amount) {
        System.out.println("Enter the patient ID to update balance: ");
        String patientID = sc.next();

        if (UserSide.patientBalances.containsKey(patientID)) {
            double currentBalance = UserSide.patientBalances.get(patientID);
            UserSide.patientBalances.put(patientID, currentBalance + amount);
            System.out.println("Patient balance updated successfully!");
        } else {
            System.out.println("Patient ID not found. Please enter a valid ID.");
        }
    }
}

class PatientBill {
    private double totalAmount;
    private double amountPaid;

    public PatientBill() {
        this.totalAmount = 0.0;
        this.amountPaid = 0.0;
    }

    public PatientBill(double totalAmount, double amountPaid) {
        this.totalAmount = totalAmount;
        this.amountPaid = amountPaid;
    }

    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void setAmountPaid(double amountPaid) {
        this.amountPaid = amountPaid;
    }

    public double getAmountPaid() {
        return amountPaid;
    }

    public double calculateRemainingAmount() {
        return amountPaid - totalAmount;
    }
}

class DefaultBills{
private double checkupPrice;
private double laboratoryPrice;
private double privateRoomPricePerNight;
private double icuPrice;
private double medicalCertificatePrice;
private double ambulanceChargesPrice;
private double anesthesiologistsFeePerAnesthesia;
private double surgeonsFee; // Note: This price may vary

	public DefaultBills() {
	    this.checkupPrice = 700.0;
	    this.laboratoryPrice = 3000.0;
	    this.privateRoomPricePerNight = 5000.0;
	    this.icuPrice = 8000.0;
	    this.medicalCertificatePrice = 300.0;
	    this.ambulanceChargesPrice = 500.0;
	    this.anesthesiologistsFeePerAnesthesia = 3700.0;
	    this.surgeonsFee = 18000.0; // Default fee, may vary
	}
	public double getCheckupPrice() {
		return checkupPrice;
	}
	public double getLaboratoryPrice() {
		return laboratoryPrice;
	}
	public double getPrivateRoomPricePerNight() {
		return privateRoomPricePerNight;
	}
	public double getIcuPrice() {
		return icuPrice;
	}
	public double getMedicalCertificatePrice() {
		return medicalCertificatePrice;
	}
	public double getAmbulanceChargesPrice() {
		return ambulanceChargesPrice;
	}
	public double getAnesthesiologistsFeePerAnesthesia() {
		return anesthesiologistsFeePerAnesthesia;
	}
	public double getSurgeonsFee() {
		return surgeonsFee;
	}
}
